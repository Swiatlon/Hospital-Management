name: CI Workflows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*'

jobs:
  common:
    name: Cache node modules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

  lint:
    name: Lint Modified Files
    runs-on: ubuntu-latest
    needs: [common]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Lint modified files
        run: |
          echo "Identifying modified files..."
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          MODIFIED_FILES=$(git diff --name-only --diff-filter=ACMRT $BASE_SHA $HEAD_SHA -- '*.js' '*.jsx' '*.ts' '*.tsx' '*.cjs' '*.mjs')
          echo "Modified files: $MODIFIED_FILES"
          if [ -n "$MODIFIED_FILES" ]; then
            echo "Running ESLint..."
            npx eslint $MODIFIED_FILES --format table || exit 2
          else
            echo "No modified files to lint"
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [common]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build the app
        run: npm run build || (echo "Build failed. Check the logs above." && exit 1)

  jest:
    name: Jest unit tests
    runs-on: ubuntu-latest
    needs: [common]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run Jest tests with report
        run: npm run jest

      - name: Publish Test Summary Results
        run: npm run jest-report

  cypress_component:
    name: Cypress Component Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Install dependencies
        run: npm install

      - name: Publish Test Summary Results
        run: npm run cypress-report

  docker_build:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [common]

    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        run: docker build . --file prod.Dockerfile --tag frontend-image:$(date +%s)
